<h1>Tic Tac Toe</h1>

<script type="text/javascript">
// PUSHER
var pusherKey = '<%= Rails.configuration.pusher[:key] %>';
var pusherCluster = '<%= Rails.configuration.pusher[:cluster] %>';


//AI integration
var mode = "network";
var humanLetter = "X";
var aiLetter = "O";
var difficulty = "hard";


var game_id = null;
var whoAmI = null;
var myLetterChoice = null;
var myChoiceTime = null;
var opponentLetterChoice = null;
var opponentChoiceTime = null;
var isX = true;
var board = [["", "", ""], ["", "", ""], ["", "", ""]];
var isGameOver = false;
var pusher, channel;

//UI Controls
function showGameIdUI() {
 document.getElementById("startJoinContainer").style.display = "none";
 document.getElementById("gameIdContainer").style.display = "block";
}

function showLetterSelectUI() {
 document.getElementById("gameIdContainer").style.display = "none";
 document.getElementById("letterPickContainer").style.display = "block";
}

function showBoardUI() {
  document.getElementById("letterPickContainer").style.display = "none";
  document.getElementById("boardContainer").style.display = "block";

  document.getElementById("roleDisplay").innerText = "You are " + whoAmI;
  document.getElementById("roleDisplay").style.display = "block";
}

function updateDifficultyMeter(level) {
  // 1=easy, 2=medium, 3=hard
  if (level === "1") {
    difficulty = "easy";  
    document.getElementById("aiDiffLabel").innerText = "Easy"; 
  }
  if (level === "2") {
    difficulty = "medium";
    document.getElementById("aiDiffLabel").innerText = "Medium";
  }
  if (level === "3") {
    difficulty = "hard";
    document.getElementById("aiDiffLabel").innerText = "Hard";
  }
}


// START GAME - generates new game id
function startGame() {
  game_id = "game-" + Date.now();
  document.getElementById("game_ID").value = game_id;
  alert("Game created! Share this Game ID: " + game_id);
}


// JOIN GAME - uses typed game id
function joinGame() {
  game_id = document.getElementById("game_ID").value;
  if (!game_id) {
    //alert("Enter a valid Game ID to join.");
    return;
  }
}


// SUBMIT GAME ID manually
function setGameID() {
  game_id = document.getElementById('game_ID').value;
  var pusher = new Pusher(pusherKey, {
    cluster: pusherCluster
  });
  var channel = pusher.subscribe("my-channel");
  channel.bind(game_id, (data) => {
    processPushData(data);
  });
}


// LETTER SELECTION

function setAIModeAs(letter) {
  mode = "ai";
  humanLetter = letter;
  aiLetter = (letter === 'X') ? 'O' : 'X';
  whoAmI = humanLetter;

  // reset game state
  isX = true;
  isGameOver = false;
  board = [["","",""],["","",""],["","",""]];

  // show board
  document.getElementById("aiDiffSlider").style.display = "none";
  document.getElementById("aiLetterPickContainer").style.display = "none";
  showBoardUI();
  displayBoard();

  // if AI is X, it moves first
  if (whoseTurn(isX) === aiLetter) {
    setTimeout(aiMoveByDifficulty, 350);
  }
}



function selectNetworkMode() {
  mode = "network";
  document.getElementById("singleOrMultiPlayer").style.display = "none";
  document.getElementById("startJoinContainer").style.display = "block";
}


function setWhoAmI(letter) {
  var timestamp = Date.now();
  myLetterChoice = letter;
  myChoiceTime = timestamp;
  whoAmI = letter;
  console.log("You chose:", letter, "at", timestamp);
  sendLetterSelection(letter, timestamp);
  resolveLetterChoice();
}


function sendLetterSelection(letter, time) {
  var payload = {
    type: 'letterSelection',
    player: whoAmI,
    letterSelected: letter,
    time: time
  };
  $.post("/push/send_message", { data: payload, game_id: game_id });
  processLetterSelection(payload);
}

function processLetterSelection(data) {
  const { letterSelected, time } = data;
  if (myChoiceTime === time && myLetterChoice === letterSelected) {
    return;
  }
  opponentLetterChoice = letterSelected;
  opponentChoiceTime = time;
}

function resolveLetterChoice() {
  if (!myLetterChoice) return; 

  if (!opponentLetterChoice) {
    whoAmI = myLetterChoice;
  } else {
    if (myLetterChoice === opponentLetterChoice) {
      if (myChoiceTime <= opponentChoiceTime) {
        whoAmI = myLetterChoice;
      } else {
        whoAmI = (myLetterChoice === 'X') ? 'O' : 'X';
      }
    } else {
      whoAmI = myLetterChoice;
    }
  }

  console.log("Role resolved to:", whoAmI);
  var roleDiv = document.getElementById("roleDisplay");
  if (roleDiv) {
    document.getElementById("roleDisplay").style.display = "block";
    roleDiv.innerText = "You are " + whoAmI;
  }
}

// GAME NETWORKING
function sendMoveToOpponent(row, col) {
  var payload = {
    type: 'move',
    player: whoAmI,
    row: row,
    col: col
  };
  $.post("/push/send_message", { data: payload, game_id: game_id });
  processPushData(payload);
}

function processPushData(data) {
  if (data.type === 'letterSelection') {
    processLetterSelection(data);
    return;
  }

  if (data.player !== whoAmI && data.type === 'move') {
    makeMove('network', data.row, data.col);
  }
}

// GAME LOGIC
function createCellId(row, col) {
  return "cell" + row + col;
}

function displayBoard() {
  for (var i = 1; i <= 3; i++) {
    for (var j = 1; j <= 3; j++) {
      var cellID = createCellId(i, j);
      if (board[i-1][j-1] === "X") {
        document.getElementById(cellID).innerHTML = "<img height='150px' width='150px' src='https://e7.pngegg.com/pngimages/255/685/png-clipart-tic-tac-toe-computer-icons-others-miscellaneous-angle.png'/>";
      } else if (board[i-1][j-1] === "O") {
        document.getElementById(cellID).innerHTML = "<img height='150px' width='150px' src='https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTJpTHLs03dWD8fSlVnypMoalGfITxPtNWiPA&s'/>";
      } else {
        document.getElementById(cellID).innerHTML = "";
      }
    }
  }
}

function whoseTurn(isX) {
  return isX ? "X" : "O";
}

function changeTurn(isX) {
  return !isX;
}

function emptyCells() {
  var cells = [];
  for (var r = 0; r < 3; r++) {
    for (var c = 0; c < 3; c++) {
      if (board[r][c] === "") cells.push([r, c]);
    }
  }
  return cells;
}

function showAIModeLetterSelect() {
  mode = "ai";
  var m = document.getElementById("singleOrMultiPlayer");
  if (m) {
    m.style.display = "none";
  }
  var s = document.getElementById("startJoinContainer");
  if (s) {
    s.style.display = "none";
  }
  var g = document.getElementById("gameIdContainer");
  if (g) {
    g.style.display = "none";
  }

  document.getElementById("aiLetterPickContainer").style.display = "block";
  document.getElementById("aiDifficultyContainer").style.display = "block";
}


function aiMoveByDifficulty() {
  if (isGameOver || whoseTurn(isX) !== aiLetter) return;
  if (difficulty === "easy") {
    aiMakeMoveRandom();
  } else if (difficulty === "medium") {
    aiMakeMoveMedium();
  } else {
    aiMakeMoveStrong();
  }
}

function aiMakeMoveMedium() {
  if (isGameOver) return;
  if (whoseTurn(isX) !== aiLetter) return;


  var move = findImmediateWin(aiLetter);
  if (!move) {

    move = findImmediateWin(humanLetter);
  }
  if (!move) {

    if (board[1][1] === "") move = [1,1];
  }
  if (!move) {

    var corners = [[0,0],[0,2],[2,0],[2,2]].filter(p => board[p[0]][p[1]] === "");
    if (corners.length) move = corners[Math.floor(Math.random()*corners.length)];
  }
  if (!move) {

    var sides = [[0,1],[1,0],[1,2],[2,1]].filter(p => board[p[0]][p[1]] === "");
    if (sides.length) move = sides[Math.floor(Math.random()*sides.length)];
  }
  if (!move) {
    // fallback
    var empties = emptyCells();
    if (!empties.length) return;
    move = empties[Math.floor(Math.random()*empties.length)];
  }

  board[move[0]][move[1]] = aiLetter;
  displayBoard();
  isX = changeTurn(isX);
  checkForWin();
}


function findImmediateWin(player) {
  var L = lines();
  for (var k = 0; k < L.length; k++) {
    var a = L[k][0], b = L[k][1], c = L[k][2];
    var vals = [board[a[0]][a[1]], board[b[0]][b[1]], board[c[0]][c[1]]];
    var countPlayer = vals.filter(v => v === player).length;
    var countEmpty  = vals.filter(v => v === "").length;
    if (countPlayer === 2 && countEmpty === 1) {
      // return the empty cell
      if (vals[0] === "") return a;
      if (vals[1] === "") return b;
      if (vals[2] === "") return c;
    }
  }
  return null;
}


function aiMakeMoveRandom() {
  if (isGameOver) return;
  var turn = whoseTurn(isX);
  if (turn !== aiLetter) return; // only move on AI turn

  var empties = emptyCells();
  if (empties.length === 0) return;

  var pick = empties[Math.floor(Math.random() * empties.length)];
  var r = pick[0], c = pick[1];
  board[r][c] = aiLetter;
  displayBoard();
  isX = changeTurn(isX);
  checkForWin();
}

function lines() {
  return [
    [[0,0],[0,1],[0,2]], [[1,0],[1,1],[1,2]], [[2,0],[2,1],[2,2]],
    [[0,0],[1,0],[2,0]], [[0,1],[1,1],[2,1]], [[0,2],[1,2],[2,2]],
    [[0,0],[1,1],[2,2]], [[0,2],[1,1],[2,0]]
  ];
}

function winnerOf(b) {
  var L = lines();
  for (var k = 0; k < L.length; k++) {
    var a = b[L[k][0][0]][L[k][0][1]];
    var c = b[L[k][1][0]][L[k][1][1]];
    var d = b[L[k][2][0]][L[k][2][1]];
    if (a !== "" && a === c && a === d) return a; // "X" or "O"
  }
  return null;
}

function isFull(b) {
  for (var r = 0; r < 3; r++)
    for (var c = 0; c < 3; c++)
      if (b[r][c] === "") return false;
  return true;
}

function minimax(b, currentPlayer) {
  var w = winnerOf(b);
  if (w === aiLetter)    return { score: +1 };
  if (w === humanLetter) return { score: -1 };
  if (isFull(b))         return { score: 0 };

  var best = {
    score: (currentPlayer === aiLetter ? -Infinity : +Infinity),
    move: null
  };

  for (var r = 0; r < 3; r++) {
    for (var c = 0; c < 3; c++) {
      if (b[r][c] !== "") continue;

      b[r][c] = currentPlayer;
      var result = minimax(b, currentPlayer === aiLetter ? humanLetter : aiLetter);
      b[r][c] = "";

      if (currentPlayer === aiLetter) {
        if (result.score > best.score) best = { score: result.score, move: [r, c] };
      } else {
        if (result.score < best.score) best = { score: result.score, move: [r, c] };
      }
    }
  }
  return best;
}

function aiMakeMoveStrong() {
  if (isGameOver) return;
  if (whoseTurn(isX) !== aiLetter) return;

  var copy = JSON.parse(JSON.stringify(board));
  var best = minimax(copy, aiLetter);
  var r = best.move ? best.move[0] : null;
  var c = best.move ? best.move[1] : null;

  if (r === null) {
    var empties = emptyCells();
    if (empties.length === 0) return;
    var pick = empties[Math.floor(Math.random() * empties.length)];
    r = pick[0]; c = pick[1];
  }

  board[r][c] = aiLetter;
  displayBoard();
  isX = changeTurn(isX);
  checkForWin();
}



function makeMove(source, row, col) {
  if (isGameOver) return;

  var turn = whoseTurn(isX);

  if (mode === "ai") {
    // Human move
    if (source === 'local' && turn === whoAmI && board[row-1][col-1] === "") {
      board[row-1][col-1] = whoAmI;
      displayBoard();
      isX = changeTurn(isX);
      checkForWin();
      // AI replies (small delay feels nicer)
      if (!isGameOver) {
        setTimeout(aiMoveByDifficulty, 500);
      }
    }
    return;
  }

  if (source === 'local' && whoAmI === turn && board[row-1][col-1] === "") {
    board[row-1][col-1] = turn;
    sendMoveToOpponent(row, col);
    displayBoard();
    isX = changeTurn(isX);
  } else if (source === 'network' && board[row-1][col-1] === "") {
    board[row-1][col-1] = turn;
    displayBoard();
    isX = changeTurn(isX);
  }
  checkForWin();
}


function checkForWin() {
  checkCoordinates(1,1,1,2,1,3);
  checkCoordinates(2,1,2,2,2,3);
  checkCoordinates(3,1,3,2,3,3);
  checkCoordinates(1,1,2,1,3,1);
  checkCoordinates(1,2,2,2,3,2);
  checkCoordinates(1,3,2,3,3,3);
  checkCoordinates(1,1,2,2,3,3);
  checkCoordinates(1,3,2,2,3,1);
}


function checkCoordinates(x1, y1, x2, y2, x3, y3) {
  if (board[x1-1][y1-1] === board[x2-1][y2-1] &&
      board[x2-1][y2-1] === board[x3-1][y3-1] &&
      board[x1-1][y1-1] !== "") {
    isGameOver = true;
    if (whoAmI === board[x1-1][y1-1]) {
      alert("You WON!");
    } else {
      alert("You lost.");
    }
  }
}
</script>


<style>
body {
  font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
  background: linear-gradient(to bottom, #f0f4f8, #dfe9f3);
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 30px;
}


h1 {
  font-size: 48px;
  margin-bottom: 20px;
  color: #333;
  text-shadow: 1px 1px 2px #ccc;
}

button {
  padding: 10px 20px;
  margin: 5px;
  font-size: 18px;
  border: none;
  border-radius: 8px;
  background-color: #4a90e2;
  color: white;
  cursor: pointer;
  transition: 0.3s ease;
}

button:hover {
  background-color: #357ABD;
}

input[type="text"] {
  padding: 8px 12px;
  font-size: 16px;
  margin: 5px;
  border-radius: 6px;
  border: 1px solid #aaa;
}

table {
  border-collapse: collapse;
  margin-top: 30px;
}

td {
  border: 2px solid #555;
  text-align: center;
  vertical-align: middle;
  background-color: white;
}

td img {
  display: block;
  margin: auto;
}

#roleDisplay, #turnDisplay {
  font-size: 24px;
  margin: 20px;
  color: #444;
  font-weight: bold;
  display: none;
}

#game_ID {
  width: 200px;
}
</style>


<!-- HTML UI -->
<div id="singleOrMultiPlayer" style="margin-bottom: 12px;">
  <button onclick="showAIModeLetterSelect()">Single Player vs AI</button>
  <button onclick="selectNetworkMode()">Multiplayer (Online)</button>
</div>

<div id="aiDifficultyContainer" style="display:none; margin:6px 0 12px;">
  <label style="font-weight:600; margin-right:8px;">Difficulty:</label>
  <input id="aiDiffSlider" type="range" min="1" max="3" step="1" value="3"
         oninput="updateDifficultyMeter(this.value)" onchange="updateDifficultyMeter(this.value)" />
  <span id="aiDiffLabel" style="margin-left:8px; font-weight:600;">Hard</span>
</div>

<div id="aiLetterPickContainer" style="display:none; margin-bottom:12px;">
  <button onclick="setAIModeAs('X')">Play as X</button>
  <button onclick="setAIModeAs('O')">Play as O</button>
</div>

<div id="startJoinContainer" style="display:none;">
 <button onclick="startGame(); showGameIdUI()">Start Game</button>
 <button onclick="joinGame(); showGameIdUI()">Join Game</button>
</div>


<div id="gameIdContainer" style="display:none;">
 <br />
 Game ID: <input name="game_ID" id="game_ID" type="text">
 <button type="button" onclick="setGameID(); showLetterSelectUI()">Submit</button>
 <br /><br />
</div>


<div id="letterPickContainer" style="display:none;">
 <button onclick="setWhoAmI('X'); showBoardUI()">Pick X</button>
 <button onclick="setWhoAmI('O'); showBoardUI()">Pick O</button>
 <br /><br />
</div>

<div id="roleDisplay"></div>
<div id="turnDisplay"></div>

<div id="boardContainer" style="display:none;">
 <table>
   <tr>
     <td>
       <table border="1">
         <tr>
           <td id="cell11" height="150px" width="150px" onclick="makeMove('local', 1, 1)"></td>
           <td id="cell12" height="150px" width="150px" onclick="makeMove('local', 1, 2)"></td>
           <td id="cell13" height="150px" width="150px" onclick="makeMove('local', 1, 3)"></td>
         </tr>
         <tr>
           <td id="cell21" height="150px" width="150px" onclick="makeMove('local', 2, 1)"></td>
           <td id="cell22" height="150px" width="150px" onclick="makeMove('local', 2, 2)"></td>
           <td id="cell23" height="150px" width="150px" onclick="makeMove('local', 2, 3)"></td>
         </tr>
         <tr>
           <td id="cell31" height="150px" width="150px" onclick="makeMove('local', 3, 1)"></td>
           <td id="cell32" height="150px" width="150px" onclick="makeMove('local', 3, 2)"></td>
           <td id="cell33" height="150px" width="150px" onclick="makeMove('local', 3, 3)"></td>
         </tr>
       </table>
     </td>
   </tr>
 </table>
</div>





